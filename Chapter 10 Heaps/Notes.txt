Heaps Notes

A heap is a specialized binary tree. The keys must statisfy heap property
    - the key at each node is at least as great as the keys stored in the children
    - Can be modeled with an array where children are stroed at indices 2i+1 and 2i+2

- Max heap
    - Insertion: O(logn)
    - Max: O(1)
    - Searching aribtary nodes: O(n)

- Sometime referred to as a priority queue 

Heap functionality in Python is provided by the heapq module
    - heapq.heapify(L) which transforms the elements in L into a heap in place
    - heapq.nlargest(k, L) heapq.nsmallest returns k largest/smallest elements in L 
    - heapq.heappush(h,e) pushes a new element on the heap
    - heapq.heappop(h) which pops the smallest element from the heap
    - heapq.heappushpop(h,a) which pushes a on the heap and then pops and returns the smallest elements
    - e = h[0] returns the smallest element on the heap without popping it 

- Heapq only provides min heap functionality but you can push negative elements for max heap