Dynamic Programming Notes:
    - DP is a general technique for solving optimization, search and counting problems
      that can be decomposed into subproblems

    - Consider using DP whenever you have to make choise to arrive at the solution, when the solutions relate to subproblems
    
    - What makes it different than divide and conquer?
        - DP solves similar but the same subproblem may reoccur
        - Key is to cache results

    - Example
        - Fibonaci is given by F(n) =  F(n-1) + F(n-2)
          with F(0) = 0 and F (1) = 1
        - The basic function is O(2^n) but with cache it is (O(n))
    
    - Key to solving
        - break into subproblems that can be solved relatively easily
        - these subproblem solutions are cached

    - Bootcamp
        - The cache is built from the bottom up
        - cache space may be recycled 